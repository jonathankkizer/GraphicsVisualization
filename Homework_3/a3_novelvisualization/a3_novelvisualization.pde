// Initializing Globals
PFont courier;
String[] wordHistory = new String[200]; //Initialize an array of strings to store word history, will never be more than 200 words on the screen
String currentLineString; // Each displayed line is a string
String[] uniqueWords; // Will store all unique words from our text file
int wordHistoryArrayIndex = 0; // Used to iterate through word history
int yPos; // Indicates the y starting point of where to draw new lines (strings)
int lineCounter; //Keeps track of how many lines we have printed so we don't overflow the screen
int xPos; // Indicates the x starting point of where to draw new lines (strings)

void setup() {
  size(700,600);
  background(0);
  courier = createFont("Courier", 32);
  textFont(courier);
  
  // Making wordHistory an array of empty strings
  for (int i=0;i< wordHistory.length; i++) {
    wordHistory[i]="";
  }
  
  uniqueWords = loadStrings("uniquewords.txt"); // Text file we made by running a python script against a novel
  
  currentLineString = ""; // Each new line initalized as blank string
  lineCounter = 0;
  yPos = 32; // We determined 32 is an appropriate starting point for the y position we are drawing to
}

void draw() {
  if (lineCounter < 18) {
    populateLineString(); // As long as than 18 lines have been drawn to the screen, draw another one
  }
}

void populateLineString() {
  currentLineString = ""; // Each new line initalized as blank string
  String currentWord = ""; // We will keep track of each word within the string in order to determine its color based on its length
  xPos = 5; // We determined 5 is an appropriate starting point for the x position we are drawing to, for each line
  
  while (textWidth(currentLineString) + textWidth(currentWord) < width) { // As long as the word we want to add to the line will not go past the screen of this line
    //Then we can determine what color we want this word to be based on its length
    if (currentWord.length() <= 5) { 
      fill(255,0 ,0); // Red for short words
    } else if (currentWord.length() <= 9 & currentWord.length() > 5) {
      fill(8,167,9); // Dark green for "medium" length words
    } else if (currentWord.length() > 9) {
      fill(0,255, 255); // Cyan for longer words
    }
    
    // Since the word was deemed acceptable for the current line via the while loop, we can add it to the currentLineString
    currentLineString += currentWord + " ";
    wordHistory[wordHistoryArrayIndex] = currentLineString; // Add the approved word to our history of approved words so we do not use it again on the canvas
    wordHistoryArrayIndex+=1; // Increment the index of this wordHistoryArray so that we can store the next approved word at the next index
    
    text(currentWord, xPos, yPos); // Draw the word to the screen
    xPos += textWidth(currentWord) + textWidth(" "); // We want to increase the x position so that the next word can be drawn at an appropriate distance away
    
    //Generate a random number so that a new word can be selected
    int randomIndex = (int)random(3270); // 3270 allows us to ensure we don't generate an integer out of the bounds of the uniqueWords array generated by the text document
    currentWord = uniqueWords[randomIndex]; // Picks the new word based on the randomly generated number
    
    // Generate a new word until a the generated word is not already in word history
    while (isInArray(currentWord,wordHistory)) { // We wrote our own function to search for an element in an Array
      randomIndex = (int)random(3270);
      currentWord = uniqueWords[randomIndex];
    }
    
  }
  // The line is now done since selected word would go past the rigth edge of the screen,
  // so we increment our yposition by 32 so move down enough for the next line, and incrwase lineCounter by 1
  yPos += 32;
  lineCounter += 1;
}

void mouseClicked() {
  // When the mouse is pressed, reset the lineCounter, background, yposition, wordHistory array, and wordHistoryindex
  // so that a new canvas of randomly selected unique words can appear
  lineCounter = 0;
  background(0);
  yPos = 32;
  
  for (int i=0;i< wordHistory.length; i++) {
    wordHistory[i]="";
  }
  wordHistoryArrayIndex = 0;
}

boolean isInArray(String elementToFind, String[] ArrayToSearch) { 
  
  //Performs a sequential scan of the elements in an array to determine if an element is within it
  for(int i=0;i<ArrayToSearch.length;i++){
    if (ArrayToSearch[i]==elementToFind) {
      return true;
    }
  }
  return false;
      
}