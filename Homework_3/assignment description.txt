Assignment 3 
Group Members: 
Brandon Kerbow, Jonathan Kizer, Xinyun Zhang

In this assignment, our group used the novel <The Invisible Man> 
to do word extraction and visualization. 

*** extract_words.py  ***
Functions: 
readAllWords(file): This function takes a text file as an argument, returns a list of all words appeared in the file.
formatStuff(string): This function gets rid of all punctuations and anything that is not an alphabet from a string/word. 
writeAllWords(file): This function reads all words from a text file(by using function readAllWords()) and write them into an empty text file "allwords.txt", one word per line.
numOccuerrences(): This function creates a dictionary to store the words from "allwords.txt" as a keys and its occurrence as its corresponding value.
uniqueWords(dictionary): This function reads through the dictionary and writes all words which occurrence is 1 into an empty file "uniquewords.txt", one word per line. 
wordFruquency(dictionary): This function counts the number of words with same occurrences and writes the pair (occurrence: number of words with that occurrence) into a text file "wordfrequency.txt", one pair per line.

A remaining issue is how we treat "--" interjections in the text's dialogue. The author has many times that they use this writing style, which presents a problem for our parsing technique. Since the usage of "--" is different than "-", and our code currently does not retain any knowledge of n+1 characters, we made a decision to simply remove any "-" and replace it with "". This results in some occurrences of inappropriately-combined words, though with far less error than replacing "-" with " " or "\n".

After implementing the extract_words.py on novel <The Invisible Man>, we got three text files, "allwords.txt","uniquewords.txt"and "wordfrequency.txt", used for visualization. 

We used "allwords.txt" to create a word cloud on Jason Davies' website. 

*** a3_novelvisualization: ***
Global value:
PFont courier: text font.
String[] wordHistory: a list of words which have shown on the canvas already. 
int wordHistoryArrayIndex: used to iterate through word history. 
String currentLineString: a string to store word in a line, used to check the line width.
String[] uniqueWords: used to store all unique words in a string list. 
int xPos: the horizontal position to draw a word at. 
int yPos: the vertical position to draw a word at.
int lineCounter: Keep track of how many lines have been drawn on the canvas.

In setup:
Canvas size was set as 700*600 with black background color. 
We chose Courier as our text font, and 32 as the text size.
All words from "uniquewords.txt" were loaded into the string array uniqueWords.
Initialized the currentLineString to an empty string, the lineCounter to 0 and the yPos as 32. 

Function populateLineString:
This function draws one line of words on the canvas. 
A while loop is used to randomly select word from uniqueWords, and check couple conditions:
The width of current line plus new selected word does not exceed the canvas width. 
The new selected word does not appear in the word history.  
Color decision: If the length of the word is less or equal to 5, use red color. If the length is between 5 and 9, use green color. Else use blue color. 
Then draw the new selected word onto the canvas. 
Outside of the while loop, the xPos is initialized to 5 and the yPos increases by 32 to start a new line, the line counter increases by 1.

In draw:
We call the populateLineString to generate 18 lines on the canvas. 
MouseClick:  Everything is set to initial value in order to do the draw loop all over again to show a new set of words. 

*** a3_wordfrequency: ***
String[] freqFile: used to load the frequency pair.
In setup:
Set the canvas size to (500,500) and load all the frequency from “wordfrequecnt.txt”.
Set the fill color as black. 
In draw:  Draw a scatterplot to show the relationship between occurrence 
Write the title, name of x-axis and y-axis with blue color. 
Draw the x-axis, y-axis, and scales manually. 
Translate the canvas to set the bottom left corner as (0,0) for easier dots positioning. 
Draw a dot for each word frequency pair, at ln(occurrence) as horizontal position and ln(number of words) as vertical position. 

Extra Credit:
A few areas of our code we feel may be eligible for extra credit. Primarily, a3_wordfrequency creates a graph without any sort of graphing library; we instead wrote code to convert Processing's coordinate system into one that more closely fits with a traditional coordinate-system. 
Additionally, beyond the requirements of Assignment 3, we maintain an array of used words in a3_novelvisualization. If our random function pulls a word that has already been used, we pull another word until a distinct one is used, and proceed.